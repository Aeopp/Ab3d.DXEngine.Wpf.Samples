<Page x:Class="Ab3d.DXEngine.Wpf.Samples.PowerToysOther.VisualBrushTest"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:cameras="clr-namespace:Ab3d.Cameras;assembly=Ab3d.PowerToys"
      xmlns:ab3d="clr-namespace:Ab3d.Controls;assembly=Ab3d.PowerToys"  
      xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"
      xmlns:dxControls="clr-namespace:Ab3d.DirectX.Controls;assembly=Ab3d.DXEngine.Wpf"
      mc:Ignorable="d" 
      d:DesignHeight="400" d:DesignWidth="800"
      Title="VisualBrushTest">
    <Page.Resources>
        <VisualBrush x:Key="UsedVisualBrush1">
            <VisualBrush.Visual>
                <Border Background="Gray" BorderBrush="DarkGreen" BorderThickness="1">
                    <TextBlock Text="1" />
                </Border>
            </VisualBrush.Visual>
        </VisualBrush>
        <VisualBrush x:Key="UsedVisualBrush2">
            <VisualBrush.Visual>
                <Border Background="Gray" BorderBrush="DarkGreen" BorderThickness="1">
                    <TextBlock Text="1" />
                </Border>
            </VisualBrush.Visual>
        </VisualBrush>
        <VisualBrush x:Key="BigVisualBrush">
            <VisualBrush.Visual>
                <Border Background="Gray" BorderBrush="Black" BorderThickness="1">
                    <TextBlock Text="BIG" FontSize="10" Margin="2 0" />
                </Border>
            </VisualBrush.Visual>
        </VisualBrush>
        <VisualBrush x:Key="SmallVisualBrush">
            <VisualBrush.Visual>
                <Border Background="Gray" BorderBrush="Black" BorderThickness="1">
                    <TextBlock Text="SMALL" FontSize="10" Margin="2 0" />
                </Border>
            </VisualBrush.Visual>
        </VisualBrush>
    </Page.Resources>
    <Grid>
        <Border Name="ViewportBorder">
            <Border.Background>
                <LinearGradientBrush StartPoint="0 0" EndPoint="0 1">
                    <GradientStop Offset="0" Color="#033C62"/>
                    <GradientStop Offset="1" Color="#01131F"/>
                </LinearGradientBrush>
            </Border.Background>

            <dxControls:DXViewportView Name="MainDXViewportView" PresentationType="DirectXImage" BackgroundColor="Transparent">

                <Viewport3D Name="MainViewport">

                    <!-- Small and Big rectangles show how to specify different sizes for rendered bitmaps. -->
                    <!-- This is done in code behind with using SetDXAttribute extension method. -->
                    <visuals:PlaneVisual3D x:Name="SmallPlane" CenterPosition="-45 0 -40" Normal="0 0 1" HeightDirection="0 1 0" Size="10 5" >
                        <visuals:PlaneVisual3D.Material>
                            <DiffuseMaterial Brush="{StaticResource SmallVisualBrush}" />
                        </visuals:PlaneVisual3D.Material>
                    </visuals:PlaneVisual3D>

                    <visuals:PlaneVisual3D x:Name="BigPlane" CenterPosition="10 12 -40" Normal="0 0 1" HeightDirection="0 1 0" Size="80 30" >
                        <visuals:PlaneVisual3D.Material>
                            <DiffuseMaterial Brush="{StaticResource BigVisualBrush}" />
                        </visuals:PlaneVisual3D.Material>
                    </visuals:PlaneVisual3D>
                    

                    <!-- Three rectangles with green border show how to update the material with VisualBrush. -->
                    <!-- The first rectangle does not get updated when VisualBrush is changed. -->
                    <!-- The second rectangle is updated with calling Refresh method on the DXEngine's material that is used to show the WPF's Material. -->
                    <!-- The third rectangle is updated with resetting the Visual property of the VisualBrush (setting the property to null and then back to its previous value). This way DXEngine can get a change notification and it can update the texture. -->
                    <visuals:HorizontalPlaneVisual3D x:Name="Plane1" CenterPosition="-40 0 0" Size="30 30" >
                        <visuals:HorizontalPlaneVisual3D.Material>
                            <DiffuseMaterial Brush="{StaticResource UsedVisualBrush1}" />
                        </visuals:HorizontalPlaneVisual3D.Material>
                    </visuals:HorizontalPlaneVisual3D>

                    <visuals:HorizontalPlaneVisual3D x:Name="Plane2" CenterPosition="0 0 0" Size="30 30" >
                        <visuals:HorizontalPlaneVisual3D.Material>
                            <DiffuseMaterial Brush="{StaticResource UsedVisualBrush1}" />
                        </visuals:HorizontalPlaneVisual3D.Material>
                    </visuals:HorizontalPlaneVisual3D>
                    
                    <visuals:HorizontalPlaneVisual3D x:Name="Plane3" CenterPosition="40 0 0" Size="30 30" >
                        <visuals:HorizontalPlaneVisual3D.Material>
                            <DiffuseMaterial Brush="{StaticResource UsedVisualBrush2}" />
                        </visuals:HorizontalPlaneVisual3D.Material>
                    </visuals:HorizontalPlaneVisual3D>


                    <!-- Rectangel with orange border shows how to dynamically set the size of rendered bitmap based on -->                    
                    <!-- the size of rendered rectangle on the screen. -->
                    <visuals:PlaneVisual3D x:Name="DynamicPlane" CenterPosition="0 -10 25" Normal="0 0 1" HeightDirection="0 1 0" Size="40 15" >
                        <visuals:PlaneVisual3D.Material>
                            <DiffuseMaterial>
                                <DiffuseMaterial.Brush>
                                    <VisualBrush>
                                        <VisualBrush.Visual>
                                            <Border Background="Gray" BorderBrush="Orange" BorderThickness="1">
                                                <TextBlock Name="DynamicInfoTextBlock" Text="128 x 64" FontSize="10" Margin="2 0"/>
                                            </Border>
                                        </VisualBrush.Visual>
                                    </VisualBrush>
                                </DiffuseMaterial.Brush>
                            </DiffuseMaterial>
                        </visuals:PlaneVisual3D.Material>
                    </visuals:PlaneVisual3D>
                    
                    <ModelVisual3D>
                        <ModelVisual3D.Content>
                            <Model3DGroup>
                                <AmbientLight Color="#333333"/>
                            </Model3DGroup>
                        </ModelVisual3D.Content>
                    </ModelVisual3D>
                </Viewport3D>

            </dxControls:DXViewportView>

        </Border>

        <cameras:TargetPositionCamera Name="Camera1" Heading="15" Attitude="-20" Bank="0" Distance="230" TargetPosition="0 0 0"
                                      ShowCameraLight="Always"
                                      TargetViewport3D="{Binding ElementName=MainViewport}"/>

        <!-- EventsSourceElement is set to ViewportBorder - this means that the ViewportBorder's mouse events are subscribed to - this enables camera rotation without the need to be over the rendered 3D element -->
        <ab3d:MouseCameraController Name="MouseCameraController1"
                                    RotateCameraConditions="LeftMouseButtonPressed"
                                    MoveCameraConditions="LeftMouseButtonPressed, ControlKey"
                                    EventsSourceElement="{Binding ElementName=ViewportBorder}"
                                    TargetCamera="{Binding ElementName=Camera1}"/>

        <TextBlock FontWeight="Bold" FontSize="20" Foreground="Silver" Margin="10" VerticalAlignment="Top" HorizontalAlignment="Left" Text="Rendering and updating VisualBrush in DXEngine"/>

        <StackPanel  VerticalAlignment="Bottom" HorizontalAlignment="Right" Orientation="Vertical">
            <Button Name="RefreshMaterialsButton" Content="Refresh Materials" Padding="15 5" HorizontalAlignment="Right" 
                    ToolTip="This button will reset VisualBursh materials of all three rectangle with green border."
                    Click="RefreshMaterialsButton_Click" />
            
            <Button Name="ChangeRenderSizeButton" Content="Change BigPlane render size" Padding="15 5" Margin="0 5 0 0"
                    ToolTip="This button will change the size of the rendered bitmap of the rectangle with BIG text."
                    Click="ChangeRenderSizeButton_OnClick" />
        </StackPanel>
    </Grid>
</Page>
